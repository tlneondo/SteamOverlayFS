function unmountFinalOverlays(){
    local params=("$@")
    mountPoint=${params[0]}

    sync
    sync

    echo "Masking automount for ${mountPoint}"
    sudo systemctl --runtime mask "$(systemd-escape -p --suffix=automount ${mountPoint})" 
    sudo umount "$mountPoint"

        #kill any processes using the mount

       #badProcessesls=($(lsof $mountPoint | awk 'NR > 1 {print $2}' | awk '!seen[$0]++'))

        #for i in "${badProcessesls[@]}"; do
        #need logic to make sure Desktop environment or shell doesn't get killed

        #    kill -9 $badProcessesls[@]

        # done   

    sync
    sync
}


function remountROLowerasReadable(){
    local params=("$@")
    mountPoint=${params[0]}

    mounttemp=$(echo $mountPoint | sed 's=.*/==')

    echo "Finding block device for $mounttemp"

    BlockDeviceLocation=$(sudo blkid | grep $mounttemp | cut -d':' -f1)
    UUIDForMount=$(cat /etc/fstab | grep SSDWinLower | grep "UUID" | cut -d'=' -f2 | cut -d ' ' -f1)

    echo $BlockDeviceLocation

    sync
    sync

    #echo "Masking automount for ${mountPoint}"
    #sudo systemctl --runtime mask "$(systemd-escape -p --suffix=automount ${mountPoint})" 
    echo "Remounting $mountPoint as read-write"
    #sudo umount -f "$mountPoint" 

    sync
    sync


    sudo mount -t ntfs "$BlockDeviceLocation" "$mountPoint"

    sync
    sync
}




function remountReadOnlyFS(){
    local params=("$@")
    ntfsROLocations=${params[0]}
    UUIDS=${params[1]}

    echo "Unmounting RO NTFS mount POINTS" 

    for mountPoint in "${ntfsROLocations[@]}"; do
        if mountpoint -q "$mountPoint"; then
            sync
            sync
            sudo umount -f "$mountPoint"
            sync
            sync            
            if [[ $? -ne 0 ]]; then
                echo "Failed to unmount $mountPoint, exiting" 
                exit 1
            fi
        else
            echo "$mountPoint is not mounted, skipping unmount" 
        fi
    done
}

function reloadFromFSTAB(){
    sync
    sync
    sudo mount -a && sudo systemctl daemon-reload && sudo systemctl restart local-fs.target
    sync
    sync
}